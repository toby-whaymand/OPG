from winsound import Beep
import string
import random
import time
import configparser
import os
import threading
import sys
import tkinter as tk
from tkinter import simpledialog, messagebox

# ANSI escape codes for green text
GREEN = '\033[92m'
RESET = '\033[0m'

# Activation sound
Beep(400, 400)
Beep(450, 600)
Beep(400, 400)
time.sleep(1)

# Config paths
CONFIG_FILE_NAME = 'config.ini'
CONFIG_SECTION = 'security'
PIN_KEY = 'pin'
LOCK_TIMEOUT_SECONDS = 4 * 60

appdata_path = os.path.join(os.getenv('APPDATA'), 'OPG Application Data')
if not os.path.exists(appdata_path):
    os.makedirs(appdata_path)
CONFIG_FILE_PATH = os.path.join(appdata_path, CONFIG_FILE_NAME)

# Password tracking folder
PASSWORD_LOG_FOLDER = os.path.join(appdata_path, 'Novel Tracking')
if not os.path.exists(PASSWORD_LOG_FOLDER):
    os.makedirs(PASSWORD_LOG_FOLDER)
PASSWORD_LOG_FILE = os.path.join(PASSWORD_LOG_FOLDER, 'password_log.txt')

# Global flags
is_locked = False
access_granted = False

# GUI PIN input functions
def gui_get_pin(prompt):
    root = tk.Tk()
    root.withdraw()
    pin = simpledialog.askstring(prompt, prompt, show="*")
    root.destroy()
    return pin

def set_initial_pin():
    while True:
        new_pin = gui_get_pin("Welcome to your Offline Password Generator Application. Please enter your desired 4-digit PIN:")
        if new_pin and len(new_pin) == 4 and new_pin.isdigit():
            confirm_pin = gui_get_pin("Please confirm your PIN:")
            if confirm_pin == new_pin:
                save_pin(new_pin)
                messagebox.showinfo("Success", "PIN set successfully!")
                return new_pin
            else:
                messagebox.showwarning("Mismatch", "PINs do not match. Please try again.")
        else:
            messagebox.showwarning("Invalid", "PIN must be a 4-digit number. Please try again.")

def gui_unlock_pin(attempts):
    for attempt in range(attempts, 0, -1):
        pin_input = gui_get_pin(f"Application locked. Please enter your PIN to unlock (You have {attempt} attempts remaining):")
        if pin_input == correct_pin:
            messagebox.showinfo("Unlocked", "Application unlocked.")
            return True
        else:
            messagebox.showwarning("Incorrect", "Incorrect PIN. Please try again.")
    messagebox.showerror("Failed", "Too many incorrect attempts. Application will now close.")
    sys.exit()

def get_stored_pin():
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE_PATH)
    if config.has_section(CONFIG_SECTION) and config.has_option(CONFIG_SECTION, PIN_KEY):
        return config[CONFIG_SECTION][PIN_KEY]
    return None

def save_pin(pin):
    config = configparser.ConfigParser()
    if not config.has_section(CONFIG_SECTION):
        config.add_section(CONFIG_SECTION)
    config[CONFIG_SECTION][PIN_KEY] = pin
    with open(CONFIG_FILE_PATH, 'w') as configfile:
        config.write(configfile)

def lock_application():
    global is_locked
    is_locked = True
    print(f"{GREEN}\nApplication locked due to inactivity.{RESET}")

def unlock_application():
    global is_locked, access_granted
    if gui_unlock_pin(5):
        is_locked = False
        access_granted = True
        threading.Timer(LOCK_TIMEOUT_SECONDS, lock_application).start()
        return True
    return False

def inactivity_timer():
    threading.Timer(LOCK_TIMEOUT_SECONDS, lock_application).start()

def generate_password(length):
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choices(characters, k=length))

# Initial setup
correct_pin = get_stored_pin()
if correct_pin is None:
    correct_pin = set_initial_pin()

# Access loop
while not access_granted:
    if gui_unlock_pin(5):
        access_granted = True
        inactivity_timer()
    else:
        exit()

# Main loop
while True:
    if is_locked:
        if not unlock_application():
            continue
        else:
            threading.Timer(LOCK_TIMEOUT_SECONDS, lock_application).start()
            continue
    else:
        another_one = input(f"{GREEN}Would you like an awesome password? Type: Give me another awesome password or type No: {RESET}").lower()

        if another_one in ["give me another awesome password", "give me awesome password"]:
            reference = input(f"{GREEN}Please enter a reference for this password: {RESET}")
            length = random.randint(16, 30)
            password = generate_password(length)
            print(f"{GREEN}Reference: {reference}{RESET}\n")
            print(f"{GREEN}Password: {password}{RESET}\n")

            # Append to log file
            with open(PASSWORD_LOG_FILE, 'a') as f:
                f.write(f"Reference: {reference}\nPassword: {password}\n\n")

            threading.Timer(LOCK_TIMEOUT_SECONDS, lock_application).start()

        elif another_one == "no":
            print(f"{GREEN}Thank you for being secure!{RESET}")
            break

        else:
            print(f"{GREEN}That's not right. Please enter 'Give me an awesome password' or 'No'.{RESET}")
            threading.Timer(LOCK_TIMEOUT_SECONDS, lock_application).start()
